select(-Kraj)
1/14
colnames(MAIN)
#Nadawanie wag zmiennym diagnostycznym
wagi <- c(0.08,0.15,0.04, 0.05,0.08,0.08,0.08,0.05,0.15,0.04,0.04,0.04,0.04,0.04)
## Standaryzacja pozycyjna
uni <- function(x) {
(x - median(x))/median(abs(x - median(x)))
}
## Zaminana nominanty na stymulante Xj > Nj
nom1 <- function(x, N){
1/(x -N +1)
}
## Zaminana nominanty na stymulante Xj < Nj
nom2 <- function(x, N){
-1/(x -N -1)
}
## Sumowanie z wagami
wag <- function(x, wagi) {
sum(x* wagi)
}
# ZAMIANA NOMINANTY NA STYMULANTE
# W przypadku femmale income to będzie 0.5, a w przypadku global peace index 1
MIANWORK$female_income_share <- nom2(MIANWORK$female_income_share, 0.5)
MIANWORK$global_peace_index <- nom1(MIANWORK$female_income_share, 1)
MIANWORK
# STANDARYZACJA POZYCYJNA
MIANWORK <- as.data.frame(lapply(MIANWORK, uni))
MIANWORK
# ZAMIANA DESTYMULANT NA STYMULANTY
selected_col <- c("unmet_needs","housing_cost", "co","mother_mortality","neonatal_mortality","suicide", "nights", "poverty_risk")
MIANWORK[,selected_col] <- (-1) * MIANWORK[,selected_col]
#Średnia ważona dla każdego kraju (wskaźnik syntetyczny)
sw = apply(MIANWORK, 1, wag, wagi = wagi)
round(sw,2)
#Standaryzacja wskaźnika syntetycznego
Ranking <- data.frame(
Kraj = MAIN$Kraj,
WSK = (sw - min(sw)) / (max(sw - min(sw)))
)
Ranking <- Ranking[order(Ranking$WSK, decreasing = TRUE), ]
Ranking$WSK <- round(Ranking$WSK,4)
Ranking
dist <- dist(MAIN[,-c(1)], method = "euclidean")
hc_Ward <- hclust(dist, method = "ward.D")
plot(hc_Ward, labels = MAIN$Kraj, las = 2,
main = "Dendrogram - metoda Warda",
xlab = "", sub = "", cex = 0.8, hang = -1)
rect.hclust(hc_Ward, k = 4, border = "red")
set.seed(123)
grupy_h <- cutree(hc_Ward, k = 4)
MAIN$Klastry_Ward <- as.factor(grupy_h)
grupa1 <- MAIN$Kraj[MAIN$Klastry_Ward == 1]
grupa2 <- MAIN$Kraj[MAIN$Klastry_Ward == 2]
grupa3 <- MAIN$Kraj[MAIN$Klastry_Ward== 3]
grupa4 <- MAIN$Kraj[MAIN$Klastry_Ward == 4]
max_length <- max(length(grupa1), length(grupa2), length(grupa3), length(grupa4))
df_grupy <- data.frame(
Grupa1 = c(grupa1, rep(NA, max_length - length(grupa1))),
Grupa2 = c(grupa2, rep(NA, max_length - length(grupa2))),
Grupa3 = c(grupa3, rep(NA, max_length - length(grupa3))),
Grupa4 = c(grupa4, rep(NA, max_length - length(grupa4)))
)
df_grupy
library(dplyr)
library(smacof)
library(ggplot2)
num_cols <- select(MAIN, -Kraj, -Klastry_Ward)
oblicz_odleglosci <- function(data, wagi) {
n <- nrow(data)
macierz_odleglosci <- matrix(0, nrow = n, ncol = n)
for (i in 1:n) {
for (k in 1:n) {
# Oblicz odległość euklidesową
odleglosc <- sum(wagi^2 * (data[i, ] - data[k, ])^2)
macierz_odleglosci[i, k] <- odleglosc
}
}
return(macierz_odleglosci)
}
zmienne <- as.matrix(num_cols)
wagi <- as.numeric(wagi)
macierz_odleglosci <- oblicz_odleglosci(zmienne, wagi)
result <- smacofSym(macierz_odleglosci, ndim = 2, type = "ratio")
mds_data <- as.data.frame(result$conf)
colnames(mds_data) <- c("x", "y")
mds_data$Kraj <- MAIN$Kraj
mds_data$Klastry <- MAIN$Klastry_Ward
ggplot(mds_data, aes(x = x, y = y, label = Kraj)) +
geom_point(size = 0.5, fill = Klastry) +
geom_text(size = 2,vjust = -1) +  # Etykiety nad punktami
labs( x = "Dim 1",
y = "Dim 2") +
theme_minimal(base_size = 10)
zmienne <- as.matrix(num_cols)
wagi <- as.numeric(wagi)
macierz_odleglosci <- oblicz_odleglosci(zmienne, wagi)
result <- smacofSym(macierz_odleglosci, ndim = 2, type = "ratio")
mds_data <- as.data.frame(result$conf)
colnames(mds_data) <- c("x", "y")
mds_data$Kraj <- MAIN$Kraj
mds_data$Klastry <- MAIN$Klastry_Ward
ggplot(mds_data, aes(x = x, y = y, label = Kraj, color = as.factor(Klastry))) +
geom_point(size = 2) +
geom_text(size = 2, vjust = -1) +
labs(x = "Dim 1",
y = "Dim 2",
color = "Klastry") +
theme_minimal(base_size = 10) +
scale_color_manual(values = c("red", "blue", "green", "purple"))
zmienne <- as.matrix(num_cols)
wagi <- as.numeric(wagi)
macierz_odleglosci <- oblicz_odleglosci(zmienne, wagi)
result <- smacofSym(macierz_odleglosci, ndim = 2, type = "ratio")
mds_data <- as.data.frame(result$conf)
colnames(mds_data) <- c("x", "y")
mds_data$Kraj <- MAIN$Kraj
mds_data$Klastry <- MAIN$Klastry_Ward
ggplot(mds_data, aes(x = x, y = y, label = Kraj, color = as.factor(Klastry))) +
geom_point(size = 2) +
geom_text(size = 3, vjust = -1) +
labs(x = "Dim 1",
y = "Dim 2",
color = "Cluster") +
theme_minimal(base_size = 10) +
scale_color_manual(values = c("deepskyblue4","deeppink4","hotpink2","mediumorchid3"))
colnames(Panstwo0) <- c("Kraj", "geometry")
Panstwo1 <- left_join(Panstwo0, MAIN, by="Kraj")
library(readxl)
library(tidyr)
library(dplyr)
join <- function( x , y ) {
left_join(x,y, by = "Kraj")
}
Tabela <- read_excel("tabelka_hihi.xlsx")
Tabela1 <- read_excel("tabelka_hihi.xlsx", sheet = 2)
Tabela2 <- read_excel("tabelka_hihi.xlsx", sheet = 3)
Tabela3 <- read_excel("tabelka_hihi.xlsx", sheet = 4)
Tabela4 <- read_excel("tabelka_hihi.xlsx", sheet = 5)
Tabela5 <- read_excel("tabelka_hihi.xlsx", sheet = 6)
Tabela6 <- read_excel("tabelka_hihi.xlsx", sheet = 7)
Tabela7 <- read_excel("tabelka_hihi.xlsx", sheet = 8)
Tabela8 <- read_excel("tabelka_hihi.xlsx", sheet = 9)
Tabela9 <- read_excel("tabelka_hihi.xlsx", sheet = 10)
a <- join(Tabela, Tabela1)
b <- join(  a, Tabela2 )
c <- join ( b, Tabela3 )
d<- join ( c, Tabela4  )
e <- join ( d, Tabela5 )
ee <- join(e, Tabela7)
ff<- join(ee, Tabela6)
g <- join ( ff, Tabela8 )
MAIN <- join (g,Tabela9)
MAIN
# SĄ braki danych ale narazie nie zwracam na nie uwagi bo nie wiem za bardzo jak się nimi zając czy usunąś obiekty z badania czy usunąć zmienną, czy jakoś zastąpić. Narazie robie wstępne EDA z warunkiem nie brania NA pod uwagę żeby zobaczyć czy może coś wyjdzie ciekawego po drodze
# Państwa z brakami danych : Turcja, Czechy,Luksembourg, Malta, Czarnogóra, Holandia
str(MAIN)
library(corrplot)
korelacja <- cor(MAIN[c(-1)], method = "spearman", use = "pairwise.complete.obs")
corrplot(korelacja)
# Przyjmując | korelacja |>0.6 to problem sprawiają pension i social benefits oraz overcrowding i daily income
# Wyrzucam z badania social_benefits i overcrowding
MAIN <- MAIN %>%
select(-overcrowding, -social_benefits, -paternal_leave, -ptlv_job_protect, -working_hours, -maternal_leave)
MIANWORK <- MAIN %>%
select(-Kraj)
for (col_name in colnames(MIANWORK)) {
boxplot(MIANWORK[[col_name]], main = col_name, xlab = "Wartości", ylab = "Rozkład")
}
lista1 <- MAIN$Kraj[MAIN$unmet_needs > 1.5]
lista2 <- MAIN$Kraj[MAIN$pension > 17]
lista3 <- MAIN$Kraj[MAIN$housing_cost > 21]
lista4 <- MAIN$Kraj[MAIN$co > 13]
lista5 <- MAIN$Kraj[MAIN$mother_mortality > 7]
lista6 <- MAIN$Kraj[MAIN$neonatal_mortality > 4]
lista7 <- MAIN$Kraj[MAIN$suicide > 6]
lista8 <- MAIN$Kraj[MAIN$forest_coverage > 55]
lista9 <- MAIN$Kraj[MAIN$forest_coverage < 10]
MAIN <- MAIN[!(MAIN$Kraj %in% c("Türkiye", "Malta")), ]
MIANWORK <- MAIN %>%
select(-Kraj)
odstajace <- function(x, war) {
# Obliczanie kwantyli
kwantyle <- quantile(x, probs = c(0.25, 0.75), na.rm = TRUE)
Q1 <- kwantyle[1]
Q3 <- kwantyle[2]
# Obliczanie wartości granicznej
var <- Q3 + 1.5 * (Q3 - Q1)
# Użycie mutate z dplyr do zastąpienia wartości
x <- ifelse(x > war, var, x)
return(x)
}
braki <- function(df) {
df_filled <- as.data.frame(lapply(df, function(x) {
if (is.numeric(x)) {
x[is.na(x)] <- median(x, na.rm = TRUE)
}
return(x)
}))
return(df_filled)
}
MAIN$unmet_needs <- odstajace(MAIN$unmet_needs, 1.5)
MAIN$pension <- odstajace(MAIN$pension, 17)
MAIN$housing_cost <- odstajace(MAIN$housing_cost, 21)
MAIN$co <- odstajace(MAIN$co, 13)
MAIN$mother_mortality <- odstajace(MAIN$mother_mortality, 7)
MAIN$neonatal_mortality <- odstajace(MAIN$neonatal_mortality, 4)
MAIN$suicide <- odstajace(MAIN$suicide, 6)
MAIN$forest_coverage <- odstajace(MAIN$forest_coverage, 55)
MAIN$nights<- odstajace(MAIN$nights, 9)
MAIN <- braki(MAIN)
MIANWORK <- MAIN %>%
select(-Kraj)
1/14
colnames(MAIN)
#Nadawanie wag zmiennym diagnostycznym
wagi <- c(0.08,0.15,0.04, 0.05,0.08,0.08,0.08,0.05,0.15,0.04,0.04,0.04,0.04,0.04)
## Standaryzacja pozycyjna
uni <- function(x) {
(x - median(x))/median(abs(x - median(x)))
}
## Zaminana nominanty na stymulante Xj > Nj
nom1 <- function(x, N){
1/(x -N +1)
}
## Zaminana nominanty na stymulante Xj < Nj
nom2 <- function(x, N){
-1/(x -N -1)
}
## Sumowanie z wagami
wag <- function(x, wagi) {
sum(x* wagi)
}
# ZAMIANA NOMINANTY NA STYMULANTE
# W przypadku femmale income to będzie 0.5, a w przypadku global peace index 1
MIANWORK$female_income_share <- nom2(MIANWORK$female_income_share, 0.5)
MIANWORK$global_peace_index <- nom1(MIANWORK$female_income_share, 1)
MIANWORK
# STANDARYZACJA POZYCYJNA
MIANWORK <- as.data.frame(lapply(MIANWORK, uni))
MIANWORK
# ZAMIANA DESTYMULANT NA STYMULANTY
selected_col <- c("unmet_needs","housing_cost", "co","mother_mortality","neonatal_mortality","suicide", "nights", "poverty_risk")
MIANWORK[,selected_col] <- (-1) * MIANWORK[,selected_col]
#Średnia ważona dla każdego kraju (wskaźnik syntetyczny)
sw = apply(MIANWORK, 1, wag, wagi = wagi)
round(sw,2)
#Standaryzacja wskaźnika syntetycznego
Ranking <- data.frame(
Kraj = MAIN$Kraj,
WSK = (sw - min(sw)) / (max(sw - min(sw)))
)
Ranking <- Ranking[order(Ranking$WSK, decreasing = TRUE), ]
Ranking$WSK <- round(Ranking$WSK,4)
Ranking
dist <- dist(MAIN[,-c(1)], method = "euclidean")
hc_Ward <- hclust(dist, method = "ward.D")
plot(hc_Ward, labels = MAIN$Kraj, las = 2,
main = "Dendrogram - metoda Warda",
xlab = "", sub = "", cex = 0.8, hang = -1)
rect.hclust(hc_Ward, k = 4, border = "red")
set.seed(123)
grupy_h <- cutree(hc_Ward, k = 4)
MAIN$Klastry_Ward <- as.factor(grupy_h)
grupa1 <- MAIN$Kraj[MAIN$Klastry_Ward == 1]
grupa2 <- MAIN$Kraj[MAIN$Klastry_Ward == 2]
grupa3 <- MAIN$Kraj[MAIN$Klastry_Ward== 3]
grupa4 <- MAIN$Kraj[MAIN$Klastry_Ward == 4]
max_length <- max(length(grupa1), length(grupa2), length(grupa3), length(grupa4))
df_grupy <- data.frame(
Grupa1 = c(grupa1, rep(NA, max_length - length(grupa1))),
Grupa2 = c(grupa2, rep(NA, max_length - length(grupa2))),
Grupa3 = c(grupa3, rep(NA, max_length - length(grupa3))),
Grupa4 = c(grupa4, rep(NA, max_length - length(grupa4)))
)
df_grupy
library(dplyr)
library(smacof)
library(ggplot2)
num_cols <- select(MAIN, -Kraj, -Klastry_Ward)
oblicz_odleglosci <- function(data, wagi) {
n <- nrow(data)
macierz_odleglosci <- matrix(0, nrow = n, ncol = n)
for (i in 1:n) {
for (k in 1:n) {
# Oblicz odległość euklidesową
odleglosc <- sum(wagi^2 * (data[i, ] - data[k, ])^2)
macierz_odleglosci[i, k] <- odleglosc
}
}
return(macierz_odleglosci)
}
zmienne <- as.matrix(num_cols)
wagi <- as.numeric(wagi)
macierz_odleglosci <- oblicz_odleglosci(zmienne, wagi)
result <- smacofSym(macierz_odleglosci, ndim = 2, type = "ratio")
mds_data <- as.data.frame(result$conf)
colnames(mds_data) <- c("x", "y")
mds_data$Kraj <- MAIN$Kraj
mds_data$Klastry <- MAIN$Klastry_Ward
ggplot(mds_data, aes(x = x, y = y, label = Kraj, color = as.factor(Klastry))) +
geom_point(size = 2) +
geom_text(size = 3, vjust = -1) +
labs(x = "Dim 1",
y = "Dim 2",
color = "Cluster") +
theme_minimal(base_size = 10) +
scale_color_manual(values = c("deepskyblue4","deeppink4","hotpink2","mediumorchid3"))
oblicz_statystyki <- function(grupa) {
grupa %>%
summarise(across(where(is.numeric),
list(srednia = mean, wsp_zmiennosci = sd(.x) / mean(.x) * 100)))
}
wyniki <- MAIN %>%
group_by(Klastry_Ward) %>%
filter(!is.na(Klastry_Ward)) %>%
select(-Kraj) %>%  # Pomijamy kolumnę Kraj
summarise(across(where(is.numeric),
list(srednia = mean, wsp_zmiennosci = ~ sd(.x) / mean(.x) * 100))) %>%
arrange(Klastry_Ward)
wyniki
library("ggrepel")
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library(fmsb)
library(grDevices)
world <- ne_countries(scale = "medium", returnclass = "sf")
MAIN <- MAIN %>%
mutate(Kraj = ifelse(Kraj == "Czechia", "Czech Republic", Kraj))
Panstwo0 <- world %>%
filter (name_long %in% MAIN$Kraj) %>%
select ( name_long,geometry)
world %>%
ggplot() +
geom_sf() +
geom_sf(data=Panstwo0, aes(fill=Panstwo0$name_long),fill = "deepskyblue4", color = "black") +
coord_sf(xlim = c(-27.603002, 44.043782),
ylim =  c(73.061423,33.659532), expand = FALSE)+
theme_light(base_size = 16) +
labs( fill = NULL)
colnames(Panstwo0) <- c("Kraj", "geometry")
Panstwo1 <- left_join(Panstwo0, MAIN, by="Kraj")
world %>%
ggplot() +
geom_sf() +
geom_sf(data= Panstwo1, aes(fill= Klastry_Ward), color = "black") +
coord_sf(xlim = c(-27.603002, 44.043782),
ylim =  c(73.061423,33.659532), expand = FALSE) +
scale_fill_manual(values = c("deepskyblue4","deeppink4","hotpink2","mediumorchid3")) +
labs(fill = "Cluster") +
theme_bw(base_size = 16)
stress_value <- result$stress
print(stress_value)
library(dplyr)
library(smacof)
library(ggplot2)
# Standaryzacja do skalowania
SKAL <- as.data.frame(lapply(MAIN[,-Kraj], uni))
library(dplyr)
library(smacof)
library(ggplot2)
# Standaryzacja do skalowania
SKAL <- as.data.frame(lapply(MAIN[,-c(1)], uni))
library(dplyr)
library(smacof)
library(ggplot2)
# Standaryzacja do skalowania
SKAL <- as.data.frame(lapply(MAIN[,2:15], uni))
SKAL
oblicz_odleglosci <- function(data, wagi) {
n <- nrow(data)
macierz_odleglosci <- matrix(0, nrow = n, ncol = n)
for (i in 1:n) {
for (k in 1:n) {
# Oblicz odległość euklidesową
odleglosc <- sum(wagi^2 * (data[i, ] - data[k, ])^2)
macierz_odleglosci[i, k] <- odleglosc
}
}
return(macierz_odleglosci)
}
zmienne <- as.matrix(SKAL)
wagi <- as.numeric(wagi)
macierz_odleglosci <- oblicz_odleglosci(zmienne, wagi)
result <- smacofSym(macierz_odleglosci, ndim = 2, type = "ratio")
mds_data <- as.data.frame(result$conf)
colnames(mds_data) <- c("x", "y")
mds_data$Kraj <- MAIN$Kraj
mds_data$Klastry <- MAIN$Klastry_Ward
ggplot(mds_data, aes(x = x, y = y, label = Kraj, color = as.factor(Klastry))) +
geom_point(size = 2) +
geom_text(size = 3, vjust = -1) +
labs(x = "Dim 1",
y = "Dim 2",
color = "Cluster") +
theme_minimal(base_size = 10) +
scale_color_manual(values = c("deepskyblue4","deeppink4","hotpink2","mediumorchid3"))
stress_value <- result$stress
print(stress_value)
library(dplyr)
library(smacof)
library(ggplot2)
# Standaryzacja do skalowania
SKAL <- as.data.frame(lapply(MAIN[,2:15], scale))
SKAL
oblicz_odleglosci <- function(data, wagi) {
n <- nrow(data)
macierz_odleglosci <- matrix(0, nrow = n, ncol = n)
for (i in 1:n) {
for (k in 1:n) {
# Oblicz odległość euklidesową
odleglosc <- sum(wagi^2 * (data[i, ] - data[k, ])^2)
macierz_odleglosci[i, k] <- odleglosc
}
}
return(macierz_odleglosci)
}
zmienne <- as.matrix(SKAL)
wagi <- as.numeric(wagi)
macierz_odleglosci <- oblicz_odleglosci(zmienne, wagi)
result <- smacofSym(macierz_odleglosci, ndim = 2, type = "ratio")
mds_data <- as.data.frame(result$conf)
colnames(mds_data) <- c("x", "y")
mds_data$Kraj <- MAIN$Kraj
mds_data$Klastry <- MAIN$Klastry_Ward
ggplot(mds_data, aes(x = x, y = y, label = Kraj, color = as.factor(Klastry))) +
geom_point(size = 2) +
geom_text(size = 3, vjust = -1) +
labs(x = "Dim 1",
y = "Dim 2",
color = "Cluster") +
theme_minimal(base_size = 10) +
scale_color_manual(values = c("deepskyblue4","deeppink4","hotpink2","mediumorchid3"))
stress_value <- result$stress
print(stress_value)
oblicz_odleglosci <- function(data, wagi) {
n <- nrow(data)
macierz_odleglosci <- matrix(0, nrow = n, ncol = n)
for (i in 1:n) {
for (k in 1:n) {
# Oblicz odległość euklidesową
odleglosc <- sum(wagi *sqrt((data[i, ] - data[k, ])^2))
macierz_odleglosci[i, k] <- odleglosc
}
}
return(macierz_odleglosci)
}
zmienne <- as.matrix(SKAL)
wagi <- as.numeric(wagi)
macierz_odleglosci <- oblicz_odleglosci(zmienne, wagi)
result <- smacofSym(macierz_odleglosci, ndim = 2, type = "ratio")
mds_data <- as.data.frame(result$conf)
colnames(mds_data) <- c("x", "y")
mds_data$Kraj <- MAIN$Kraj
mds_data$Klastry <- MAIN$Klastry_Ward
ggplot(mds_data, aes(x = x, y = y, label = Kraj, color = as.factor(Klastry))) +
geom_point(size = 2) +
geom_text(size = 3, vjust = -1) +
labs(x = "Dim 1",
y = "Dim 2",
color = "Cluster") +
theme_minimal(base_size = 10) +
scale_color_manual(values = c("deepskyblue4","deeppink4","hotpink2","mediumorchid3"))
stress_value <- result$stress
print(stress_value)
zmienne <- as.matrix(SKAL)
wagi <- as.numeric(wagi)
macierz_odleglosci <- oblicz_odleglosci(zmienne, wagi)
result <- smacofSym(macierz_odleglosci, ndim = 2, type = "ratio")
mds_data <- as.data.frame(result$conf)
colnames(mds_data) <- c("x", "y")
mds_data$Kraj <- MAIN$Kraj
mds_data$Klastry <- MAIN$Klastry_Ward
ggplot(mds_data, aes(x = x, y = y, label = Kraj, color = as.factor(Klastry))) +
geom_point(size = 2) +
geom_text(size = 3, vjust = -1) +
labs(x = "Dim 1",
y = "Dim 2",
color = "Cluster") +
theme_minimal(base_size = 10) +
scale_color_manual(values = c("deepskyblue4","deeppink4","hotpink2","mediumorchid3"))
oblicz_odleglosci <- function(data, wagi) {
n <- nrow(data)
macierz_odleglosci <- matrix(0, nrow = n, ncol = n)
for (i in 1:n) {
for (k in 1:n) {
# Oblicz odległość euklidesową
odleglosc <- sum(wagi^2 * (data[i, ] - data[k, ])^2)
macierz_odleglosci[i, k] <- odleglosc
}
}
return(macierz_odleglosci)
}
zmienne <- as.matrix(SKAL)
wagi <- as.numeric(wagi)
macierz_odleglosci <- oblicz_odleglosci(zmienne, wagi)
result <- smacofSym(macierz_odleglosci, ndim = 2, type = "ratio")
mds_data <- as.data.frame(result$conf)
colnames(mds_data) <- c("x", "y")
mds_data$Kraj <- MAIN$Kraj
mds_data$Klastry <- MAIN$Klastry_Ward
ggplot(mds_data, aes(x = x, y = y, label = Kraj, color = as.factor(Klastry))) +
geom_point(size = 2) +
geom_text(size = 3, vjust = -1) +
labs(x = "Dim 1",
y = "Dim 2",
color = "Cluster") +
theme_minimal(base_size = 10) +
scale_color_manual(values = c("deepskyblue4","deeppink4","hotpink2","mediumorchid3"))
stress_value <- result$stress
print(stress_value)
